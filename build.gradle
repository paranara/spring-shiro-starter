buildscript {
    repositories {
        maven { url 'https://repository.mulesoft.org/nexus/content/repositories/public/' }
        maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repositories/jcenter' }
        maven { url 'https://maven.aliyun.com/repositories/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        mavenLocal()
        gradlePluginPortal()
        mavenCentral()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://maven.eveoh.nl/content/repositories/releases" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/plugins-release" }
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.franzbecker:gradle-lombok:$gradleLombokVersion"
    }
}

apply from: rootProject.file("dependencies.gradle")

allprojects {
    ext {
        isReleasedVersion = !project.version.endsWith("-SNAPSHOT")
    }
}

task outt {
    print project.version
}

subprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "idea"
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'signing'

    repositories {
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://s01.oss.sonatype.org/content/repositories/releases/' }
        maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repositories/jcenter' }
        maven { url 'https://maven.aliyun.com/repositories/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url "https://repo1.maven.org/maven2/" }
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        mavenLocal()
        mavenCentral()
        maven { url "http://nexus.aist.io/nexus/repository/maven-public/" }
        maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
        maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
        maven { url "https://oss.sonatype.org/content/repositories/releases" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://repo.spring.io/plugins-release/" }
        maven { url "https://dl.bintray.com/uniconiam/maven" }
        maven { url "https://jitpack.io" }
    }

    sourceSets {
        main {
            java {
                srcDirs = ["${projectDir}/src/main/java", "${projectDir}/src/main/groovy"]

            }
            resources {
                srcDirs = ["${projectDir}/src/main/resources"]
            }
        }
        test {
            java {
                srcDirs = ["${projectDir}/src/test/java", "${projectDir}/src/test/groovy"]

            }
            resources {
                srcDirs = ["${projectDir}/src/test/resources"]
            }
        }
    }

    compileJava.doLast {
        def currentTime = java.time.ZonedDateTime.now()
        jar.manifest {
            attributes("Implementation-Date": currentTime, "Created-By": project.group)

        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"

    task createPom {
        doLast {
            pom {
                project {
                    inceptionYear '2019'
                    licenses {
                        license {
                            name project.name
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                }
            }.writeTo("$projectDir/pom.xml")
        }
    }

    dependencyManagement {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    dependencies {
        implementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
        compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    }
}
